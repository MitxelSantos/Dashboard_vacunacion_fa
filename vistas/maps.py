"""
vistas/maps.py
Vista de mapas interactivos para visualizaci√≥n geogr√°fica de cobertura
"""

import streamlit as st
import pandas as pd
import numpy as np
from streamlit_folium import st_folium
import plotly.express as px
import plotly.graph_objects as go
from pathlib import Path


def show_maps_view(data, filters, colors, fuente_poblacion="DANE"):
    """
    Vista principal de mapas interactivos
    """
    st.title("üó∫Ô∏è Mapas Interactivos de Cobertura")

    # Verificar dependencias
    try:
        from src.visualization.interactive_maps import get_map_manager
        from src.visualization.geo_loader import get_geo_loader
    except ImportError as e:
        st.error(f"‚ùå Error importando m√≥dulos de mapas: {str(e)}")
        st.info(
            "üí° Aseg√∫rate de instalar: pip install geopandas folium streamlit-folium"
        )
        return

    # Aplicar filtros a los datos
    from src.data.preprocessor import apply_filters

    filtered_data = apply_filters(data, filters, fuente_poblacion)

    if len(filtered_data["vacunacion"]) == 0:
        st.warning("‚ö†Ô∏è No hay datos de vacunaci√≥n disponibles con los filtros aplicados")
        return

    # Inicializar manejador de mapas
    map_manager = get_map_manager()

    # Sidebar para configuraci√≥n de mapas
    st.sidebar.subheader("üó∫Ô∏è Configuraci√≥n de Mapas")

    # Selector de nivel de detalle
    nivel_detalle = st.sidebar.selectbox(
        "Nivel de detalle:",
        ["Municipios", "Veredas", "Ambos"],
        help="Selecciona el nivel geogr√°fico a visualizar",
    )

    # Selector de tipo de mapa
    tipo_mapa = st.sidebar.selectbox(
        "Tipo de visualizaci√≥n:",
        ["Cobertura", "Densidad de Vacunados", "Comparativo"],
        help="Tipo de informaci√≥n a mostrar en el mapa",
    )

    # Opciones adicionales
    mostrar_estadisticas = st.sidebar.checkbox("Mostrar estad√≠sticas", value=True)
    mostrar_leyenda = st.sidebar.checkbox("Mostrar leyenda", value=True)

    # =====================================================================
    # SECCI√ìN 1: VERIFICACI√ìN Y CARGA DE GEODATOS
    # =====================================================================

    st.subheader("üìÇ Estado de Archivos Geogr√°ficos")

    # Verificar disponibilidad de shapefiles
    geo_loader = get_geo_loader()
    available_shapefiles = geo_loader.list_available_shapefiles()

    # Mostrar estado de archivos
    col1, col2, col3 = st.columns(3)

    with col1:
        dept_status = "‚úÖ" if available_shapefiles["departamento"] else "‚ùå"
        st.write(
            f"{dept_status} **Departamento:** {len(available_shapefiles['departamento'])} archivo(s)"
        )
        if available_shapefiles["departamento"]:
            for file in available_shapefiles["departamento"]:
                st.write(f"  ‚Ä¢ {file}")

    with col2:
        mun_status = "‚úÖ" if available_shapefiles["municipios"] else "‚ùå"
        st.write(
            f"{mun_status} **Municipios:** {len(available_shapefiles['municipios'])} archivo(s)"
        )
        if available_shapefiles["municipios"]:
            for file in available_shapefiles["municipios"]:
                st.write(f"  ‚Ä¢ {file}")

    with col3:
        ver_status = "‚úÖ" if available_shapefiles["veredas"] else "‚ùå"
        st.write(
            f"{ver_status} **Veredas:** {len(available_shapefiles['veredas'])} archivo(s)"
        )
        if available_shapefiles["veredas"]:
            for file in available_shapefiles["veredas"]:
                st.write(f"  ‚Ä¢ {file}")

    # Bot√≥n para cargar geodatos
    if st.button("üîÑ Cargar Archivos Geogr√°ficos"):
        with st.spinner("Cargando shapefiles..."):
            success = map_manager.load_geodata()

            if success:
                st.success("‚úÖ Geodatos cargados correctamente")

                # Mostrar informaci√≥n de validaci√≥n
                validation = geo_loader.validate_geodata_structure(map_manager.geodata)

                if validation["errors"]:
                    st.error("‚ùå Errores encontrados:")
                    for error in validation["errors"]:
                        st.write(f"  - {error}")

                if validation["warnings"]:
                    st.warning("‚ö†Ô∏è Advertencias:")
                    for warning in validation["warnings"]:
                        st.write(f"  - {warning}")

                with st.expander("‚ÑπÔ∏è Informaci√≥n detallada de geodatos"):
                    for info in validation["info"]:
                        st.write(f"  - {info}")
            else:
                st.error("‚ùå No se pudieron cargar los geodatos")
                st.info(
                    """
                **Para usar mapas interactivos, necesitas:**
                1. Colocar tus archivos shapefile en la carpeta `data/geo/`
                2. Asegurarte de que cada shapefile tenga todos sus archivos (.shp, .shx, .dbf, .prj)
                3. Nombrar los archivos siguiendo los patrones: `tolima_municipios.shp`, `tolima_veredas.shp`
                """
                )
                return

    # Verificar si los geodatos est√°n cargados
    if not hasattr(map_manager, "geodata") or not map_manager.geodata:
        st.info("üí° Haz clic en 'Cargar Archivos Geogr√°ficos' para comenzar")
        return

    # =====================================================================
    # SECCI√ìN 2: C√ÅLCULO DE COBERTURA
    # =====================================================================

    st.subheader("üìä C√°lculo de Cobertura por √Årea Geogr√°fica")

    with st.spinner("Calculando cobertura..."):
        # Calcular cobertura por municipio
        municipio_coverage = map_manager.calculate_coverage_by_municipio(
            filtered_data["vacunacion"], filtered_data["metricas"], fuente_poblacion
        )

        # Calcular cobertura por vereda (si es posible)
        vereda_coverage = pd.DataFrame()
        if nivel_detalle in ["Veredas", "Ambos"]:
            vereda_coverage = map_manager.calculate_coverage_by_vereda(
                filtered_data["vacunacion"], filtered_data["metricas"], fuente_poblacion
            )

    # =====================================================================
    # SECCI√ìN 3: MOSTRAR ESTAD√çSTICAS
    # =====================================================================

    if mostrar_estadisticas:
        if nivel_detalle == "Municipios":
            map_manager.show_coverage_statistics(municipio_coverage, "municipio")
        elif nivel_detalle == "Veredas" and not vereda_coverage.empty:
            map_manager.show_coverage_statistics(vereda_coverage, "vereda")
        elif nivel_detalle == "Ambos":
            col1, col2 = st.columns(2)
            with col1:
                st.markdown("#### Estad√≠sticas por Municipio")
                map_manager.show_coverage_statistics(municipio_coverage, "municipio")
            with col2:
                st.markdown("#### Estad√≠sticas por Vereda")
                if not vereda_coverage.empty:
                    map_manager.show_coverage_statistics(vereda_coverage, "vereda")
                else:
                    st.info("No hay datos de vereda disponibles")

    # =====================================================================
    # SECCI√ìN 4: CREAR Y MOSTRAR MAPAS
    # =====================================================================

    st.subheader("üó∫Ô∏è Mapa Interactivo de Cobertura")

    try:
        if nivel_detalle == "Municipios":
            # Mapa solo de municipios
            mapa = map_manager.create_interactive_coverage_map(
                municipio_coverage,
                nivel="municipios",
                title=f"Cobertura por Municipio - {fuente_poblacion}",
            )

        elif nivel_detalle == "Veredas":
            # Mapa solo de veredas
            if not vereda_coverage.empty:
                mapa = map_manager.create_interactive_coverage_map(
                    vereda_coverage,
                    nivel="veredas",
                    title=f"Cobertura por Vereda - {fuente_poblacion}",
                )
            else:
                st.warning("‚ö†Ô∏è No hay datos de vereda disponibles")
                return

        else:  # "Ambos"
            # Mapa con ambos niveles
            mapa = map_manager.create_dual_level_map(
                municipio_coverage, vereda_coverage
            )

        # Mostrar el mapa
        map_data = st_folium(
            mapa, width=1200, height=600, returned_objects=["last_object_clicked"]
        )

        # =====================================================================
        # SECCI√ìN 5: MANEJO DE CLICKS EN EL MAPA
        # =====================================================================

        # Procesar clicks en el mapa
        if map_data["last_object_clicked"]:
            clicked_data = map_data["last_object_clicked"]

            st.subheader("üìç Informaci√≥n del √Årea Seleccionada")

            # Aqu√≠ podr√≠as extraer m√°s informaci√≥n basada en el click
            # Por ahora mostramos la informaci√≥n b√°sica disponible

            if "popup" in clicked_data:
                st.info(
                    "‚ÑπÔ∏è Haz clic en cualquier √°rea del mapa para ver informaci√≥n detallada"
                )

            # Mostrar gr√°ficos adicionales para el √°rea seleccionada
            if st.checkbox("Mostrar an√°lisis detallado del √°rea seleccionada"):
                show_detailed_area_analysis(filtered_data, clicked_data, colors)

        # =====================================================================
        # SECCI√ìN 6: AN√ÅLISIS COMPLEMENTARIOS
        # =====================================================================

        st.subheader("üìà An√°lisis Complementarios")

        # Selector de an√°lisis complementario
        analisis_complementario = st.selectbox(
            "Selecciona an√°lisis adicional:",
            [
                "Ranking de Cobertura",
                "An√°lisis de Brechas",
                "Comparativo Temporal",
                "Distribuci√≥n Demogr√°fica",
            ],
        )

        if analisis_complementario == "Ranking de Cobertura":
            show_coverage_ranking(municipio_coverage, vereda_coverage, nivel_detalle)

        elif analisis_complementario == "An√°lisis de Brechas":
            show_coverage_gaps_analysis(
                municipio_coverage, vereda_coverage, fuente_poblacion
            )

        elif analisis_complementario == "Comparativo Temporal":
            show_temporal_coverage_comparison(filtered_data, colors)

        elif analisis_complementario == "Distribuci√≥n Demogr√°fica":
            show_demographic_distribution_map(filtered_data, map_manager, colors)

    except Exception as e:
        st.error(f"‚ùå Error creando mapa: {str(e)}")

        # Mostrar informaci√≥n de debug
        with st.expander("üîç Informaci√≥n de debug"):
            st.write("**Error detallado:**", str(e))
            st.write("**Geodatos disponibles:**", list(map_manager.geodata.keys()))
            st.write("**Datos de cobertura:**")
            if not municipio_coverage.empty:
                st.write("  - Municipios:", len(municipio_coverage))
            if not vereda_coverage.empty:
                st.write("  - Veredas:", len(vereda_coverage))


def show_detailed_area_analysis(filtered_data, clicked_data, colors):
    """
    Muestra an√°lisis detallado para un √°rea espec√≠fica seleccionada
    """
    st.markdown("### üîç An√°lisis Detallado del √Årea")

    # Aqu√≠ podr√≠as filtrar los datos espec√≠ficamente para el √°rea clickeada
    # Por ejemplo, si tienes informaci√≥n sobre qu√© municipio/vereda fue clickeada

    # Por ahora, mostramos un an√°lisis general
    col1, col2 = st.columns(2)

    with col1:
        # Distribuci√≥n por g√©nero en el √°rea
        if "Sexo" in filtered_data["vacunacion"].columns:
            genero_dist = filtered_data["vacunacion"]["Sexo"].value_counts()
            fig = px.pie(
                values=genero_dist.values,
                names=genero_dist.index,
                title="Distribuci√≥n por G√©nero",
            )
            st.plotly_chart(fig, use_container_width=True)

    with col2:
        # Distribuci√≥n por grupo de edad
        if "Grupo_Edad" in filtered_data["vacunacion"].columns:
            edad_dist = filtered_data["vacunacion"]["Grupo_Edad"].value_counts().head(8)
            fig = px.bar(
                x=edad_dist.index, y=edad_dist.values, title="Distribuci√≥n por Edad"
            )
            fig.update_xaxes(tickangle=45)
            st.plotly_chart(fig, use_container_width=True)


def show_coverage_ranking(municipio_coverage, vereda_coverage, nivel_detalle):
    """
    Muestra ranking de cobertura
    """
    st.markdown("### üèÜ Ranking de Cobertura")

    if nivel_detalle in ["Municipios", "Ambos"] and not municipio_coverage.empty:
        st.markdown("#### Top 10 Municipios")

        top_municipios = municipio_coverage.nlargest(10, "cobertura")

        col1, col2 = st.columns(2)

        with col1:
            st.markdown("**ü•á Mejor Cobertura**")
            st.dataframe(
                top_municipios[["municipio", "cobertura", "vacunados"]].head(5),
                use_container_width=True,
            )

        with col2:
            st.markdown("**üîª Menor Cobertura**")
            bottom_municipios = municipio_coverage.nsmallest(5, "cobertura")
            st.dataframe(
                bottom_municipios[["municipio", "cobertura", "vacunados"]],
                use_container_width=True,
            )

    if nivel_detalle in ["Veredas", "Ambos"] and not vereda_coverage.empty:
        st.markdown("#### Top 10 Veredas")

        top_veredas = vereda_coverage.nlargest(10, "cobertura")
        st.dataframe(
            top_veredas[["vereda", "municipio", "cobertura", "vacunados"]],
            use_container_width=True,
        )


def show_coverage_gaps_analysis(municipio_coverage, vereda_coverage, fuente_poblacion):
    """
    An√°lisis de brechas de cobertura
    """
    st.markdown("### üìä An√°lisis de Brechas de Cobertura")

    if not municipio_coverage.empty:
        # Identificar municipios con baja cobertura
        low_coverage = municipio_coverage[municipio_coverage["cobertura"] < 50]

        if not low_coverage.empty:
            st.warning(
                f"‚ö†Ô∏è {len(low_coverage)} municipios tienen cobertura menor al 50%"
            )

            # Calcular poblaci√≥n en riesgo
            poblacion_riesgo = (
                low_coverage["poblacion"].sum() - low_coverage["vacunados"].sum()
            )

            col1, col2, col3 = st.columns(3)

            with col1:
                st.metric("Municipios en Riesgo", len(low_coverage))

            with col2:
                st.metric(
                    "Poblaci√≥n en Riesgo", f"{poblacion_riesgo:,}".replace(",", ".")
                )

            with col3:
                cobertura_promedio_riesgo = low_coverage["cobertura"].mean()
                st.metric("Cobertura Promedio", f"{cobertura_promedio_riesgo:.1f}%")

            # Mostrar lista de municipios prioritarios
            st.markdown("#### üéØ Municipios Prioritarios")
            priority_municipios = low_coverage.sort_values("cobertura")[
                ["municipio", "cobertura", "poblacion", "vacunados"]
            ]
            st.dataframe(priority_municipios, use_container_width=True)

        else:
            st.success("‚úÖ Todos los municipios tienen cobertura superior al 50%")


def show_temporal_coverage_comparison(filtered_data, colors):
    """
    Comparativo temporal de cobertura (si hay datos de fecha)
    """
    st.markdown("### üìÖ Evoluci√≥n Temporal por √Årea")

    if "FA UNICA" in filtered_data["vacunacion"].columns:
        # Convertir fechas
        filtered_data["vacunacion"]["FechaVacunacion"] = pd.to_datetime(
            filtered_data["vacunacion"]["FA UNICA"], errors="coerce"
        )

        # Agrupar por fecha y municipio
        if "NombreMunicipioResidencia" in filtered_data["vacunacion"].columns:
            temporal_data = (
                filtered_data["vacunacion"]
                .groupby(
                    [
                        filtered_data["vacunacion"]["FechaVacunacion"].dt.date,
                        "NombreMunicipioResidencia",
                    ]
                )
                .size()
                .reset_index()
            )

            temporal_data.columns = ["Fecha", "Municipio", "Vacunados"]

            # Mostrar solo los 5 municipios principales
            top_municipios = (
                filtered_data["vacunacion"]["NombreMunicipioResidencia"]
                .value_counts()
                .head(5)
                .index
            )
            temporal_filtered = temporal_data[
                temporal_data["Municipio"].isin(top_municipios)
            ]

            if not temporal_filtered.empty:
                fig = px.line(
                    temporal_filtered,
                    x="Fecha",
                    y="Vacunados",
                    color="Municipio",
                    title="Evoluci√≥n de Vacunaci√≥n por Municipio",
                )
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("No hay suficientes datos temporales para mostrar")
    else:
        st.info("No hay datos de fecha disponibles para an√°lisis temporal")


def show_demographic_distribution_map(filtered_data, map_manager, colors):
    """
    Distribuci√≥n demogr√°fica en el mapa
    """
    st.markdown("### üë• Distribuci√≥n Demogr√°fica")

    # An√°lisis por g√©nero y municipio
    if (
        "Sexo" in filtered_data["vacunacion"].columns
        and "NombreMunicipioResidencia" in filtered_data["vacunacion"].columns
    ):
        demo_data = (
            filtered_data["vacunacion"]
            .groupby(["NombreMunicipioResidencia", "Sexo"])
            .size()
            .reset_index()
        )
        demo_data.columns = ["Municipio", "Genero", "Cantidad"]

        # Crear gr√°fico de distribuci√≥n
        fig = px.bar(
            demo_data,
            x="Municipio",
            y="Cantidad",
            color="Genero",
            title="Distribuci√≥n de G√©nero por Municipio",
            color_discrete_map={
                "Masculino": colors.get("primary", "#1f77b4"),
                "Femenino": colors.get("secondary", "#ff7f0e"),
                "No Binario": colors.get("accent", "#2ca02c"),
            },
        )
        fig.update_xaxes(tickangle=45)
        st.plotly_chart(fig, use_container_width=True)


def show(data, filters, colors, fuente_poblacion="DANE"):
    """
    Funci√≥n principal para mostrar la vista de mapas
    (Compatible con la estructura existente del dashboard)
    """
    show_maps_view(data, filters, colors, fuente_poblacion)
