"""
app.py - Dashboard de Vacunaci√≥n Fiebre Amarilla - Tolima
VERSI√ìN UNIFICADA COMPLETA con sistema integrado de datos y divisi√≥n temporal autom√°tica

Desarrollado para la Secretar√≠a de Salud del Tolima
Autor: Ing. Jos√© Miguel Santos
Versi√≥n: 3.0.0 - Sistema Unificado Completo
"""

import os
import sys
import streamlit as st
import pandas as pd
import numpy as np
from pathlib import Path
import traceback
import warnings
from datetime import datetime
import logging

# Suprimir warnings innecesarios
warnings.filterwarnings("ignore")

# Configuraci√≥n de rutas
ROOT_DIR = Path(__file__).resolve().parent
DATA_DIR = ROOT_DIR / "data"
SRC_DIR = ROOT_DIR / "src"

# Asegurar que las carpetas existan
DATA_DIR.mkdir(exist_ok=True)
(ROOT_DIR / "assets" / "images").mkdir(parents=True, exist_ok=True)

# Agregar rutas al path para importar m√≥dulos
sys.path.insert(0, str(ROOT_DIR))
sys.path.insert(0, str(SRC_DIR))

# =====================================================================
# CONFIGURACI√ìN DE LOGGING
# =====================================================================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("dashboard.log"), logging.StreamHandler()],
)
logger = logging.getLogger(__name__)

# =====================================================================
# IMPORTACI√ìN DE COMPONENTES DEL SISTEMA UNIFICADO
# =====================================================================
SYSTEM_COMPONENTS_LOADED = False
COMPONENT_ERRORS = []

try:
    # Componentes principales del sistema unificado
    from src.data.unified_loader import UnifiedDataLoader
    from src.data.population_processor import PopulationEAPBProcessor
    from src.data.vaccination_combiner import VaccinationCombiner
    from src.data.age_calculator import AgeCalculator
    from src.data.data_cleaner import UnifiedDataCleaner

    # Utilidades
    from src.utils.date_utils import date_utils, format_date, get_vaccination_summary
    from src.utils.helpers import (
        dashboard_helpers,
        configure_page,
        format_number,
        get_colors,
        create_alert,
        create_metric,
        validate_data,
    )

    SYSTEM_COMPONENTS_LOADED = True
    logger.info("‚úÖ Componentes del sistema unificado cargados exitosamente")

except ImportError as e:
    error_msg = f"Error importando componentes del sistema: {str(e)}"
    COMPONENT_ERRORS.append(error_msg)
    logger.error(error_msg)
    SYSTEM_COMPONENTS_LOADED = False

# =====================================================================
# IMPORTACI√ìN DE VISTAS CON MANEJO DE ERRORES
# =====================================================================
AVAILABLE_VIEWS = {}
view_modules = [
    "overview",
    "geographic",
    "demographic",
    "insurance",
    "trends",
    "brigadas",
]

for view_name in view_modules:
    try:
        module = __import__(f"vistas.{view_name}", fromlist=[view_name])
        AVAILABLE_VIEWS[view_name] = module
        logger.info(f"‚úÖ Vista {view_name} cargada exitosamente")
    except ImportError as e:
        error_msg = f"Vista {view_name} no disponible: {str(e)}"
        logger.warning(error_msg)
        AVAILABLE_VIEWS[view_name] = None

# =====================================================================
# CONFIGURACI√ìN INSTITUCIONAL
# =====================================================================
INSTITUTIONAL_CONFIG = {
    "title": "Dashboard Vacunaci√≥n Fiebre Amarilla - Tolima",
    "subtitle": "Secretar√≠a de Salud del Tolima - Vigilancia Epidemiol√≥gica",
    "version": "3.0.0 - Sistema Unificado Completo",
    "author": "Ing. Jos√© Miguel Santos",
    "institution": "Secretar√≠a de Salud del Tolima",
    "year": "2025",
    "description": "Sistema integral de an√°lisis de vacunaci√≥n con divisi√≥n temporal autom√°tica",
    "features": [
        "Poblaci√≥n de referencia por EAPB (Abril 2025)",
        "Divisi√≥n temporal autom√°tica (Pre-emergencia vs Emergencia)",
        "C√°lculo de edades actuales (no momento vacunaci√≥n)",
        "Limpieza unificada de datos",
        "Fecha de corte autom√°tica basada en brigadas",
    ],
}


# =====================================================================
# CLASE PRINCIPAL DE LA APLICACI√ìN UNIFICADA
# =====================================================================
class UnifiedDashboardApp:
    """
    Aplicaci√≥n principal del dashboard con sistema completamente unificado
    """

    def __init__(self):
        self.data_loader = None
        self.unified_data = None
        self.processing_metadata = {}
        self.colors = (
            get_colors() if SYSTEM_COMPONENTS_LOADED else self._get_default_colors()
        )
        self.current_date_info = None

        # Estado de la aplicaci√≥n
        self.app_state = {
            "data_loaded": False,
            "loading_errors": [],
            "cutoff_date": None,
            "last_update": None,
            "total_records": 0,
            "system_version": INSTITUTIONAL_CONFIG["version"],
            "components_loaded": SYSTEM_COMPONENTS_LOADED,
            "available_views": len(
                [v for v in AVAILABLE_VIEWS.values() if v is not None]
            ),
        }

        logger.info("üöÄ Aplicaci√≥n UnifiedDashboardApp inicializada")

    def _get_default_colors(self):
        """Colores por defecto si no se cargan las utilidades"""
        return {
            "primary": "#7D0F2B",
            "secondary": "#F2A900",
            "accent": "#5A4214",
            "success": "#509E2F",
            "warning": "#F7941D",
            "danger": "#E51937",
        }

    def initialize_app(self):
        """
        Inicializa la aplicaci√≥n con configuraci√≥n institucional completa
        """
        logger.info("üîß Inicializando aplicaci√≥n unificada")

        # Configurar p√°gina
        if SYSTEM_COMPONENTS_LOADED:
            configure_page(INSTITUTIONAL_CONFIG["title"], "üíâ", "wide")
        else:
            st.set_page_config(
                page_title=INSTITUTIONAL_CONFIG["title"], page_icon="üíâ", layout="wide"
            )

        # Informaci√≥n de fecha actual
        if SYSTEM_COMPONENTS_LOADED:
            self.current_date_info = date_utils.get_current_date_info()

        # Mostrar estado del sistema si hay errores
        if not SYSTEM_COMPONENTS_LOADED or COMPONENT_ERRORS:
            self._show_system_status()

    def _show_system_status(self):
        """
        Muestra el estado del sistema y errores si los hay
        """
        with st.sidebar:
            st.markdown("---")
            st.subheader("üîß Estado del Sistema")

            if COMPONENT_ERRORS:
                st.error("‚ùå Errores de componentes:")
                for error in COMPONENT_ERRORS:
                    st.write(f"‚Ä¢ {error}")

            st.info(
                f"""
            **Estado actual:**
            - Componentes: {'‚úÖ' if SYSTEM_COMPONENTS_LOADED else '‚ùå'}
            - Vistas: {self.app_state['available_views']}/6 disponibles
            """
            )

    def load_unified_data(self):
        """
        Carga datos usando el sistema completamente unificado
        """
        if not SYSTEM_COMPONENTS_LOADED:
            st.error("‚ùå Sistema de componentes no disponible")
            st.info(
                "üîÑ Funcionalidad limitada - algunos componentes no se cargaron correctamente"
            )
            return False

        logger.info("üîÑ Iniciando carga del sistema unificado")

        with st.spinner("üîÑ Cargando sistema unificado..."):
            try:
                # ============================================================
                # PASO 1: Cargar y procesar poblaci√≥n por EAPB
                # ============================================================
                with st.status(
                    "üìä **PASO 1:** Procesando poblaci√≥n por EAPB...", expanded=True
                ) as status:
                    st.write("Cargando Poblacion_aseguramiento.xlsx...")

                    population_processor = PopulationEAPBProcessor(str(DATA_DIR))
                    population_data = population_processor.load_population_data()

                    if population_data is None:
                        st.error("‚ùå No se pudo cargar poblaci√≥n por EAPB")
                        status.update(label="‚ùå Error en poblaci√≥n EAPB", state="error")
                        return False

                    st.success(
                        f"‚úÖ Poblaci√≥n EAPB procesada: {len(population_data)} registros"
                    )
                    status.update(label="‚úÖ Poblaci√≥n EAPB cargada", state="complete")

                # ============================================================
                # PASO 2: Combinar datos de vacunaci√≥n con fecha de corte autom√°tica
                # ============================================================
                with st.status(
                    "üîó **PASO 2:** Combinando datos de vacunaci√≥n...", expanded=True
                ) as status:
                    st.write("Determinando fecha de corte autom√°tica...")

                    combiner = VaccinationCombiner(str(DATA_DIR))
                    combined_vaccination = combiner.load_and_combine_data()

                    if combined_vaccination is None:
                        st.error("‚ùå No se pudo combinar datos de vacunaci√≥n")
                        status.update(label="‚ùå Error en combinaci√≥n", state="error")
                        return False

                    cutoff_date = combiner.cutoff_date
                    st.success(
                        f"‚úÖ Datos combinados: {len(combined_vaccination)} registros"
                    )
                    st.info(f"üìÖ Fecha de corte: {format_date(cutoff_date, 'full')}")
                    status.update(
                        label="‚úÖ Datos de vacunaci√≥n combinados", state="complete"
                    )

                # ============================================================
                # PASO 3: Calcular edades actuales
                # ============================================================
                with st.status(
                    "üéÇ **PASO 3:** Calculando edades actuales...", expanded=True
                ) as status:
                    st.write("Procesando fechas de nacimiento...")

                    if "fecha_nacimiento" in combined_vaccination.columns:
                        age_calculator = AgeCalculator()
                        combined_vaccination = (
                            age_calculator.calculate_ages_for_dataframe(
                                combined_vaccination,
                                birth_date_column="fecha_nacimiento",
                                target_age_column="edad_actual",
                                target_group_column="grupo_edad_actual",
                            )
                        )
                        st.success("‚úÖ Edades actuales calculadas")
                    else:
                        st.warning("‚ö†Ô∏è Columna de fecha de nacimiento no encontrada")

                    status.update(
                        label="‚úÖ Edades actuales procesadas", state="complete"
                    )

                # ============================================================
                # PASO 4: Aplicar limpieza unificada
                # ============================================================
                with st.status(
                    "üßπ **PASO 4:** Aplicando limpieza unificada...", expanded=True
                ) as status:
                    st.write("Normalizando y limpiando datos...")

                    cleaner = UnifiedDataCleaner()
                    clean_data = cleaner.clean_all_data(
                        {
                            "population": population_data,
                            "vaccination": combined_vaccination,
                        }
                    )

                    st.success("‚úÖ Limpieza unificada completada")
                    status.update(
                        label="‚úÖ Datos limpios y normalizados", state="complete"
                    )

                # ============================================================
                # PASO 5: Crear estructura de datos unificada
                # ============================================================
                with st.status(
                    "üìã **PASO 5:** Creando estructura unificada...", expanded=True
                ) as status:
                    st.write("Generando estructura compatible...")

                    self.unified_data = self._create_unified_structure(
                        clean_data["population"],
                        clean_data["vaccination"],
                        population_processor,
                        combiner,
                    )

                    if self.unified_data is None:
                        st.error("‚ùå Error creando estructura unificada")
                        status.update(label="‚ùå Error en estructura", state="error")
                        return False

                    st.success("‚úÖ Estructura unificada creada")
                    status.update(label="‚úÖ Sistema unificado listo", state="complete")

                # ============================================================
                # ACTUALIZAR ESTADO DE LA APLICACI√ìN
                # ============================================================
                self.app_state.update(
                    {
                        "data_loaded": True,
                        "cutoff_date": combiner.cutoff_date,
                        "last_update": self.unified_data["metadata"]["last_update"],
                        "total_records": len(clean_data["vaccination"]),
                    }
                )

                logger.info("‚úÖ Sistema unificado cargado exitosamente")
                self._show_loading_summary()
                return True

            except Exception as e:
                error_msg = f"Error cr√≠tico en carga unificada: {str(e)}"
                logger.error(error_msg)
                st.error(f"‚ùå {error_msg}")

                with st.expander("üîç Detalles del error"):
                    st.code(traceback.format_exc())

                self.app_state["loading_errors"].append(str(e))
                return False

    def _create_unified_structure(
        self, population_data, vaccination_data, population_processor, combiner
    ):
        """
        Crea estructura de datos unificada compatible con vistas existentes
        """
        try:
            logger.info("üìã Creando estructura de datos unificada")

            # Obtener metadatos
            population_metadata = population_processor.get_processing_info()
            vaccination_metadata = combiner.get_processing_info()

            # Crear estructura compatible con el sistema existente
            unified_structure = {
                # ============================================================
                # DATOS DE POBLACI√ìN (nueva referencia EAPB)
                # ============================================================
                "poblacion_eapb": population_data,
                # ============================================================
                # DATOS DE VACUNACI√ìN COMBINADOS
                # ============================================================
                "vacunacion_unificada": vaccination_data,
                # Separar por per√≠odos para an√°lisis espec√≠ficos
                "vacunacion_historica": (
                    vaccination_data[vaccination_data["periodo"] == "pre_emergencia"]
                    if "periodo" in vaccination_data.columns
                    else pd.DataFrame()
                ),
                "vacunacion_emergencia": (
                    vaccination_data[vaccination_data["periodo"] == "emergencia"]
                    if "periodo" in vaccination_data.columns
                    else pd.DataFrame()
                ),
                # ============================================================
                # COMPATIBILIDAD CON SISTEMA EXISTENTE
                # ============================================================
                "vacunacion": vaccination_data,  # Para compatibilidad con vistas
                "municipios": self._create_compatibility_municipalities(
                    population_data
                ),
                "metricas": self._calculate_municipality_metrics(
                    population_data, vaccination_data
                ),
                # ============================================================
                # METADATOS DEL SISTEMA UNIFICADO
                # ============================================================
                "metadata": {
                    "processing_date": datetime.now(),
                    "cutoff_date": vaccination_metadata.get("cutoff_date"),
                    "last_update": self._get_last_update_date(vaccination_data),
                    "population_reference_date": population_metadata.get(
                        "reference_month", "Abril 2025"
                    ),
                    "total_vaccination_records": len(vaccination_data),
                    "total_population_records": len(population_data),
                    "system_version": INSTITUTIONAL_CONFIG["version"],
                    "processing_summary": {
                        "historical_records": (
                            len(
                                vaccination_data[
                                    vaccination_data["periodo"] == "pre_emergencia"
                                ]
                            )
                            if "periodo" in vaccination_data.columns
                            else 0
                        ),
                        "emergency_records": (
                            len(
                                vaccination_data[
                                    vaccination_data["periodo"] == "emergencia"
                                ]
                            )
                            if "periodo" in vaccination_data.columns
                            else 0
                        ),
                        "unique_municipalities": (
                            vaccination_data["municipio_residencia"].nunique()
                            if "municipio_residencia" in vaccination_data.columns
                            else 0
                        ),
                        "unique_eapb": (
                            population_data["eapb"].nunique()
                            if "eapb" in population_data.columns
                            else 0
                        ),
                    },
                },
            }

            logger.info("‚úÖ Estructura unificada creada exitosamente")
            return unified_structure

        except Exception as e:
            logger.error(f"Error creando estructura unificada: {str(e)}")
            st.error(f"‚ùå Error creando estructura unificada: {str(e)}")
            return None

    def _create_compatibility_municipalities(self, population_data):
        """
        Crea DataFrame de municipios compatible con el sistema existente
        """
        try:
            if population_data is None or len(population_data) == 0:
                return pd.DataFrame(columns=["DPMP", "DANE", "SISBEN"])

            # Agrupar poblaci√≥n por municipio
            municipios_df = (
                population_data.groupby("nombre_municipio")
                .agg({"total": "sum"})
                .reset_index()
            )

            municipios_df.columns = ["DPMP", "DANE"]
            municipios_df["SISBEN"] = municipios_df["DANE"]  # Para compatibilidad

            return municipios_df

        except Exception as e:
            logger.warning(f"Error creando compatibilidad municipios: {str(e)}")
            return pd.DataFrame(columns=["DPMP", "DANE", "SISBEN"])

    def _calculate_municipality_metrics(self, population_data, vaccination_data):
        """
        Calcula m√©tricas por municipio compatibles con el sistema existente
        """
        try:
            if population_data is None or vaccination_data is None:
                return pd.DataFrame()

            logger.info("üìä Calculando m√©tricas municipales")

            # Obtener poblaci√≥n por municipio desde EAPB
            if "nombre_municipio" in population_data.columns:
                population_by_mun = (
                    population_data.groupby("nombre_municipio")
                    .agg({"total": "sum"})
                    .reset_index()
                )
                population_by_mun.columns = ["DPMP", "POBLACION_EAPB"]
            else:
                logger.warning("Columna nombre_municipio no encontrada en poblaci√≥n")
                return pd.DataFrame()

            # Contar vacunados por municipio
            if "municipio_residencia" in vaccination_data.columns:
                vaccination_by_mun = (
                    vaccination_data.groupby("municipio_residencia")
                    .size()
                    .reset_index()
                )
                vaccination_by_mun.columns = ["municipio", "Vacunados"]

                # Normalizar nombres para matching
                vaccination_by_mun["municipio_norm"] = (
                    vaccination_by_mun["municipio"].str.lower().str.strip()
                )
                population_by_mun["DPMP_norm"] = (
                    population_by_mun["DPMP"].str.lower().str.strip()
                )
            else:
                logger.warning(
                    "Columna municipio_residencia no encontrada en vacunaci√≥n"
                )
                vaccination_by_mun = pd.DataFrame()

            # Combinar poblaci√≥n y vacunaci√≥n
            if not vaccination_by_mun.empty:
                metrics = pd.merge(
                    population_by_mun,
                    vaccination_by_mun,
                    left_on="DPMP_norm",
                    right_on="municipio_norm",
                    how="left",
                )

                # Llenar vacunados faltantes con 0
                metrics["Vacunados"] = metrics["Vacunados"].fillna(0)

                # Calcular coberturas y pendientes
                metrics["Cobertura_EAPB"] = (
                    metrics["Vacunados"] / metrics["POBLACION_EAPB"] * 100
                ).round(2)
                metrics["Pendientes_EAPB"] = (
                    metrics["POBLACION_EAPB"] - metrics["Vacunados"]
                )

                # Mantener compatibilidad con nombres existentes del sistema
                metrics["DANE"] = metrics["POBLACION_EAPB"]  # Para compatibilidad
                metrics["SISBEN"] = metrics["POBLACION_EAPB"]  # Para compatibilidad
                metrics["Cobertura_DANE"] = metrics["Cobertura_EAPB"]
                metrics["Cobertura_SISBEN"] = metrics["Cobertura_EAPB"]
                metrics["Pendientes_DANE"] = metrics["Pendientes_EAPB"]
                metrics["Pendientes_SISBEN"] = metrics["Pendientes_EAPB"]

                # Seleccionar columnas finales
                final_columns = [
                    "DPMP",
                    "DANE",
                    "SISBEN",
                    "Vacunados",
                    "Cobertura_DANE",
                    "Cobertura_SISBEN",
                    "Pendientes_DANE",
                    "Pendientes_SISBEN",
                    "POBLACION_EAPB",
                    "Cobertura_EAPB",
                    "Pendientes_EAPB",
                ]

                result = metrics[final_columns].fillna(0)
                logger.info(f"‚úÖ M√©tricas calculadas para {len(result)} municipios")
                return result
            else:
                logger.warning(
                    "No se pudieron combinar datos de poblaci√≥n y vacunaci√≥n"
                )
                return pd.DataFrame()

        except Exception as e:
            logger.error(f"Error calculando m√©tricas municipales: {str(e)}")
            st.error(f"‚ùå Error calculando m√©tricas municipales: {str(e)}")
            return pd.DataFrame()

    def _get_last_update_date(self, vaccination_data):
        """
        Obtiene la fecha de √∫ltima actualizaci√≥n de los datos
        """
        try:
            if "fecha_vacunacion" in vaccination_data.columns:
                dates = pd.to_datetime(
                    vaccination_data["fecha_vacunacion"], errors="coerce"
                )
                return dates.max() if len(dates.dropna()) > 0 else None
            else:
                return None
        except:
            return None

    def _show_loading_summary(self):
        """
        Muestra resumen completo de la carga del sistema unificado
        """
        st.markdown("---")
        st.markdown("## üìä Resumen del Sistema Unificado")

        if self.unified_data and self.app_state["data_loaded"]:
            metadata = self.unified_data["metadata"]

            # ============================================================
            # M√âTRICAS PRINCIPALES
            # ============================================================
            col1, col2, col3, col4 = st.columns(4)

            with col1:
                total_vac = metadata["total_vaccination_records"]
                st.metric(
                    "Total Registros Vacunaci√≥n",
                    format_number(total_vac),
                    delta="Registros procesados",
                )

            with col2:
                total_pop = metadata["total_population_records"]
                st.metric(
                    "Registros Poblaci√≥n EAPB",
                    format_number(total_pop),
                    delta="Abril 2025",
                )

            with col3:
                cutoff_date = metadata.get("cutoff_date")
                if cutoff_date:
                    cutoff_formatted = format_date(cutoff_date, "short")
                    st.metric("Fecha de Corte", cutoff_formatted, delta="Autom√°tica")
                else:
                    st.metric("Fecha de Corte", "No determinada", delta="‚ùå")

            with col4:
                last_update = metadata.get("last_update")
                if last_update:
                    update_formatted = format_date(last_update, "short")
                    st.metric("√öltima Actualizaci√≥n", update_formatted, delta="Datos")
                else:
                    st.metric("√öltima Actualizaci√≥n", "N/A", delta="‚ùå")

            # ============================================================
            # DIVISI√ìN POR PER√çODOS
            # ============================================================
            col1, col2 = st.columns(2)

            with col1:
                st.markdown("### üìÖ Per√≠odo Pre-Emergencia")
                hist_count = metadata["processing_summary"]["historical_records"]
                if hist_count > 0:
                    st.success(f"‚úÖ {format_number(hist_count)} registros hist√≥ricos")
                    if cutoff_date:
                        st.caption(f"Antes del {format_date(cutoff_date, 'full')}")
                else:
                    st.info("‚ÑπÔ∏è Sin registros hist√≥ricos")

            with col2:
                st.markdown("### üö® Per√≠odo Emergencia")
                emerg_count = metadata["processing_summary"]["emergency_records"]
                if emerg_count > 0:
                    st.success(f"‚úÖ {format_number(emerg_count)} registros de brigadas")
                    if cutoff_date:
                        st.caption(f"Desde el {format_date(cutoff_date, 'full')}")
                else:
                    st.info("‚ÑπÔ∏è Sin registros de emergencia")

            # ============================================================
            # INFORMACI√ìN ADICIONAL DEL SISTEMA
            # ============================================================
            st.markdown("### ‚ÑπÔ∏è Informaci√≥n del Sistema Unificado")

            summary = metadata["processing_summary"]
            alert_html = create_alert(
                f"""
            **üéØ Caracter√≠sticas del Sistema Unificado:**
            - **Referencia Poblaci√≥n:** {metadata.get('population_reference_date', 'Abril 2025')} (EAPB)
            - **Divisi√≥n Temporal:** Autom√°tica basada en fecha m√°s antigua de brigadas
            - **Edades:** Calculadas a fecha actual (no momento vacunaci√≥n)
            - **Municipios √∫nicos:** {summary.get('unique_municipalities', 0)}
            - **EAPB √∫nicas:** {summary.get('unique_eapb', 0)}
            - **Versi√≥n:** {metadata.get('system_version', '3.0.0')}
            """,
                "info",
            )
            st.markdown(alert_html, unsafe_allow_html=True)

    def create_sidebar_filters(self):
        """
        Crea filtros en la barra lateral adaptados al sistema unificado
        """
        with st.sidebar:
            # ============================================================
            # LOGO E INFORMACI√ìN INSTITUCIONAL
            # ============================================================
            logo_path = ROOT_DIR / "assets" / "images" / "logo_gobernacion.png"
            if logo_path.exists():
                st.image(
                    str(logo_path), width=150, caption="Secretar√≠a de Salud del Tolima"
                )

            st.title("üè• Dashboard Vacunaci√≥n")
            st.subheader("ü¶† Fiebre Amarilla")

            # ============================================================
            # ESTADO DEL SISTEMA UNIFICADO
            # ============================================================
            if self.app_state["data_loaded"]:
                st.success("‚úÖ Sistema Unificado Activo")

                cutoff_date = self.app_state.get("cutoff_date")
                if cutoff_date:
                    st.info(f"üìÖ Corte: {format_date(cutoff_date, 'short')}")

                st.caption(f"v{INSTITUTIONAL_CONFIG['version']}")
            else:
                st.error("‚ùå Sistema no inicializado")

            # ============================================================
            # INFORMACI√ìN DE POBLACI√ìN (NUEVA REFERENCIA EAPB)
            # ============================================================
            st.markdown("---")
            st.subheader("üìä Referencia Poblacional")

            population_info_html = create_alert(
                """
            **üè• Nueva Referencia: EAPB**
            - Fuente: Poblacion_aseguramiento.xlsx
            - Fecha: Abril 2025  
            - Incluye todas las aseguradoras del Tolima
            - Reemplaza referencias DANE/SISBEN previas
            """,
                "info",
            )
            st.markdown(population_info_html, unsafe_allow_html=True)

            # ============================================================
            # FILTROS DE DATOS
            # ============================================================
            st.markdown("---")
            st.subheader("üîç Filtros de Datos")

            filters = {}

            if self.unified_data and self.app_state["data_loaded"]:
                # Filtro de municipio
                municipios = ["Todos"]
                if "DPMP" in self.unified_data["metricas"].columns:
                    municipios_unicos = (
                        self.unified_data["metricas"]["DPMP"].dropna().unique()
                    )
                    municipios.extend(sorted(municipios_unicos))

                filters["municipio"] = st.selectbox("üèòÔ∏è Municipio", municipios)

                # Filtro de per√≠odo (NUEVO - espec√≠fico del sistema unificado)
                periodos = ["Todos", "Pre-emergencia", "Emergencia"]
                filters["periodo"] = st.selectbox(
                    "üìÖ Per√≠odo de An√°lisis",
                    periodos,
                    help="Pre-emergencia: antes de brigadas | Emergencia: desde brigadas",
                )

                # Filtros demogr√°ficos
                if "vacunacion_unificada" in self.unified_data:
                    df_vac = self.unified_data["vacunacion_unificada"]

                    # G√©nero
                    if "sexo" in df_vac.columns:
                        generos = ["Todos"] + sorted(df_vac["sexo"].dropna().unique())
                        filters["sexo"] = st.selectbox("üë• G√©nero", generos)

                    # Grupo de edad actual (NUEVO)
                    if "grupo_edad_actual" in df_vac.columns:
                        grupos_edad = ["Todos"] + sorted(
                            df_vac["grupo_edad_actual"].dropna().unique()
                        )
                        filters["grupo_edad"] = st.selectbox(
                            "üéÇ Grupo de Edad Actual", grupos_edad
                        )

                    # R√©gimen
                    if "regimen_afiliacion" in df_vac.columns:
                        regimenes = ["Todos"] + sorted(
                            df_vac["regimen_afiliacion"].dropna().unique()
                        )
                        filters["regimen"] = st.selectbox("üè• R√©gimen", regimenes)

                    # EAPB/Aseguradora (NUEVO)
                    if "nombre_aseguradora" in df_vac.columns:
                        aseguradoras = ["Todos"] + list(
                            df_vac["nombre_aseguradora"].value_counts().head(15).index
                        )
                        filters["aseguradora"] = st.selectbox(
                            "üè® EAPB/Aseguradora", aseguradoras
                        )

            # ============================================================
            # CONTROLES DE FILTROS
            # ============================================================
            col1, col2 = st.columns(2)

            with col1:
                if st.button("üîÑ Restablecer"):
                    st.rerun()

            with col2:
                filters_applied = sum(1 for v in filters.values() if v != "Todos")
                st.caption(f"Filtros: {filters_applied}")

            # ============================================================
            # INFORMACI√ìN DEL DESARROLLADOR
            # ============================================================
            st.markdown("---")
            st.markdown("### üë®‚Äçüíª Informaci√≥n")
            st.caption(f"**{INSTITUTIONAL_CONFIG['author']}**")
            st.caption(f"{INSTITUTIONAL_CONFIG['institution']}")
            st.caption(f"¬© {INSTITUTIONAL_CONFIG['year']}")

            # Informaci√≥n t√©cnica expandible
            with st.expander("üîß Info T√©cnica"):
                st.write(f"**Versi√≥n:** {INSTITUTIONAL_CONFIG['version']}")
                st.write(
                    f"**Componentes:** {'‚úÖ' if SYSTEM_COMPONENTS_LOADED else '‚ùå'}"
                )
                st.write(f"**Vistas:** {self.app_state['available_views']}/6")
                if self.app_state["data_loaded"]:
                    st.write(
                        f"**Registros:** {format_number(self.app_state['total_records'])}"
                    )

            return filters

    def apply_filters_to_data(self, filters):
        """
        Aplica filtros a los datos unificados de manera inteligente
        """
        if not self.unified_data or not self.app_state["data_loaded"]:
            return self.unified_data

        try:
            logger.info(f"üîç Aplicando filtros: {filters}")
            filtered_data = self.unified_data.copy()

            # Aplicar filtros a datos de vacunaci√≥n
            df_vac = filtered_data["vacunacion_unificada"].copy()

            # Filtro de per√≠odo (espec√≠fico del sistema unificado)
            if filters.get("periodo") != "Todos":
                if (
                    filters["periodo"] == "Pre-emergencia"
                    and "periodo" in df_vac.columns
                ):
                    df_vac = df_vac[df_vac["periodo"] == "pre_emergencia"]
                elif filters["periodo"] == "Emergencia" and "periodo" in df_vac.columns:
                    df_vac = df_vac[df_vac["periodo"] == "emergencia"]

            # Filtro de municipio
            if (
                filters.get("municipio") != "Todos"
                and "municipio_residencia" in df_vac.columns
            ):
                df_vac = df_vac[
                    df_vac["municipio_residencia"].str.contains(
                        filters["municipio"], case=False, na=False
                    )
                ]

            # Filtros demogr√°ficos
            demographic_filters = {
                "sexo": "sexo",
                "grupo_edad": "grupo_edad_actual",  # Usar edad actual
                "regimen": "regimen_afiliacion",
                "aseguradora": "nombre_aseguradora",
            }

            for filter_key, column_name in demographic_filters.items():
                if (
                    filters.get(filter_key) != "Todos"
                    and filters.get(filter_key) is not None
                    and column_name in df_vac.columns
                ):
                    df_vac = df_vac[df_vac[column_name] == filters[filter_key]]

            # Actualizar datos filtrados
            filtered_data["vacunacion_unificada"] = df_vac
            filtered_data["vacunacion"] = df_vac  # Para compatibilidad

            # Recalcular m√©tricas si hay filtros aplicados
            if any(v != "Todos" for v in filters.values() if v is not None):
                filtered_data["metricas"] = self._calculate_municipality_metrics(
                    filtered_data["poblacion_eapb"], df_vac
                )

            logger.info(f"‚úÖ Filtros aplicados - {len(df_vac)} registros resultantes")
            return filtered_data

        except Exception as e:
            logger.error(f"Error aplicando filtros: {str(e)}")
            st.error(f"‚ùå Error aplicando filtros: {str(e)}")
            return self.unified_data

    def show_main_content(self, filtered_data, filters):
        """
        Muestra el contenido principal con pesta√±as mejoradas
        """
        # ============================================================
        # BANNER PRINCIPAL
        # ============================================================
        col1, col2 = st.columns([3, 1])

        with col1:
            st.title(INSTITUTIONAL_CONFIG["title"])
            st.markdown(f"**{INSTITUTIONAL_CONFIG['subtitle']}**")
            st.caption(INSTITUTIONAL_CONFIG["description"])

        with col2:
            if self.current_date_info:
                date_info = self.current_date_info
                st.info(f"üìÖ {date_info['formatted_full']}")
                st.caption(f"üïê {date_info['weekday']}")

        # ============================================================
        # BANNER DE FILTROS ACTIVOS
        # ============================================================
        active_filters = [
            f"**{k.replace('_', ' ').title()}:** {v}"
            for k, v in filters.items()
            if v != "Todos" and v is not None
        ]

        if active_filters:
            filter_text = " | ".join(active_filters)
            alert_html = create_alert(
                f"üîç **Filtros aplicados:** {filter_text}", "warning"
            )
            st.markdown(alert_html, unsafe_allow_html=True)

        # ============================================================
        # PESTA√ëAS PRINCIPALES MEJORADAS
        # ============================================================
        tabs = st.tabs(
            [
                "üìä Visi√≥n General",
                "üó∫Ô∏è Distribuci√≥n Geogr√°fica",
                "üë• Perfil Demogr√°fico",
                "üè• Aseguramiento EAPB",
                "üìà Tendencias Temporales",
                "üìç Brigadas Territoriales",
            ]
        )

        # Configuraci√≥n de pesta√±as con nuevas descripciones
        tab_configs = [
            (
                "overview",
                tabs[0],
                "Resumen general con m√©tricas principales del sistema unificado",
            ),
            (
                "geographic",
                tabs[1],
                "An√°lisis territorial por municipios con cobertura EAPB",
            ),
            (
                "demographic",
                tabs[2],
                "Perfil demogr√°fico con edades actuales calculadas",
            ),
            ("insurance", tabs[3], "An√°lisis detallado por EAPB y aseguradoras"),
            (
                "trends",
                tabs[4],
                "Tendencias temporales con divisi√≥n pre/post emergencia",
            ),
            ("brigadas", tabs[5], "An√°lisis de brigadas de emergencia territoriales"),
        ]

        # Renderizar cada pesta√±a
        for view_name, tab, description in tab_configs:
            with tab:
                # Mostrar descripci√≥n de la pesta√±a
                st.caption(f"‚ÑπÔ∏è {description}")
                self._render_view(view_name, filtered_data, filters)

    def _render_view(self, view_name, filtered_data, filters):
        """
        Renderiza una vista espec√≠fica con manejo robusto de errores
        """
        try:
            if view_name in AVAILABLE_VIEWS and AVAILABLE_VIEWS[view_name] is not None:
                logger.info(f"üé® Renderizando vista: {view_name}")

                # Adaptar datos para compatibilidad con vistas existentes
                adapted_data = self._adapt_data_for_view(filtered_data)

                # Llamar a la vista con los par√°metros correctos
                AVAILABLE_VIEWS[view_name].show(
                    adapted_data,
                    filters,
                    self.colors,
                    "EAPB",  # Nueva fuente de poblaci√≥n
                )

                logger.info(f"‚úÖ Vista {view_name} renderizada exitosamente")
            else:
                st.error(f"‚ùå Vista '{view_name}' no disponible")
                self._show_view_placeholder(view_name)

        except Exception as e:
            logger.error(f"Error en vista '{view_name}': {str(e)}")
            st.error(f"‚ùå Error en vista '{view_name}': {str(e)}")

            with st.expander("üîç Detalles del error"):
                st.code(traceback.format_exc())

            self._show_view_placeholder(view_name)

    def _show_view_placeholder(self, view_name):
        """
        Muestra placeholder para vistas no disponibles
        """
        st.info(
            f"""
        üîß **Vista '{view_name}' en mantenimiento**
        
        Esta vista necesita ser actualizada para el sistema unificado.
        
        **Caracter√≠sticas que estar√° disponible:**
        - Integraci√≥n con poblaci√≥n EAPB
        - Divisi√≥n temporal autom√°tica  
        - C√°lculo de edades actuales
        - Compatibilidad con filtros unificados
        """
        )

    def _adapt_data_for_view(self, unified_data):
        """
        Adapta datos unificados para compatibilidad con vistas existentes
        """
        return {
            # Datos principales (compatibilidad con sistema existente)
            "vacunacion": unified_data.get("vacunacion_unificada", pd.DataFrame()),
            "metricas": unified_data.get("metricas", pd.DataFrame()),
            "municipios": unified_data.get("municipios", pd.DataFrame()),
            # Datos espec√≠ficos del sistema unificado
            "poblacion_eapb": unified_data.get("poblacion_eapb", pd.DataFrame()),
            "vacunacion_historica": unified_data.get(
                "vacunacion_historica", pd.DataFrame()
            ),
            "vacunacion_emergencia": unified_data.get(
                "vacunacion_emergencia", pd.DataFrame()
            ),
            # Metadatos y informaci√≥n del sistema
            "metadata": unified_data.get("metadata", {}),
        }

    def show_footer(self):
        """
        Muestra pie de p√°gina completo con informaci√≥n del sistema unificado
        """
        st.markdown("---")
        st.markdown("## üìã Estado del Sistema Unificado")

        # ============================================================
        # M√âTRICAS DEL SISTEMA
        # ============================================================
        col1, col2, col3, col4 = st.columns(4)

        with col1:
            st.markdown("### üìä Datos")
            if self.app_state["data_loaded"]:
                total_records = format_number(self.app_state["total_records"])
                st.success(f"‚úÖ **{total_records}** registros procesados")

                last_update = self.app_state.get("last_update")
                if last_update:
                    update_str = format_date(last_update, "short")
                    st.caption(f"üìÖ Actualizado: {update_str}")
            else:
                st.error("‚ùå **Sistema no inicializado**")

        with col2:
            st.markdown("### üîß Componentes")
            components_status = (
                "‚úÖ Cargados" if SYSTEM_COMPONENTS_LOADED else "‚ùå Error"
            )
            st.write(f"**Estado:** {components_status}")

            available_views = self.app_state["available_views"]
            st.write(f"**Vistas:** {available_views}/6 disponibles")

        with col3:
            st.markdown("### üè• Referencia")
            st.write("**Poblaci√≥n:** EAPB (Abril 2025)")
            st.write("**Divisi√≥n:** Autom√°tica por brigadas")
            st.write("**Edades:** Actuales (no momento vacunaci√≥n)")

        with col4:
            st.markdown("### ‚ÑπÔ∏è Versi√≥n")
            st.write(f"**Sistema:** {INSTITUTIONAL_CONFIG['version']}")
            st.write(f"**Desarrollador:** {INSTITUTIONAL_CONFIG['author']}")
            st.write(f"**Instituci√≥n:** {INSTITUTIONAL_CONFIG['institution']}")

        # ============================================================
        # CARACTER√çSTICAS DEL SISTEMA UNIFICADO
        # ============================================================
        st.markdown("### ‚ú® Caracter√≠sticas del Sistema Unificado")

        features_text = []
        for i, feature in enumerate(INSTITUTIONAL_CONFIG["features"], 1):
            features_text.append(f"{i}. {feature}")

        features_html = create_alert(
            "**üéØ Nuevas capacidades del sistema:**\n" + "\n".join(features_text),
            "info",
        )
        st.markdown(features_html, unsafe_allow_html=True)

        # ============================================================
        # INFORMACI√ìN DE SOPORTE
        # ============================================================
        with st.expander("üÜò Soporte y Troubleshooting"):
            st.markdown(
                """
            **Si experimentas problemas:**
            
            1. **Refresca la p√°gina** (Ctrl+R o F5)
            2. **Verifica los archivos de datos** en la carpeta `data/`
            3. **Revisa los logs** en `dashboard.log`
            4. **Contacta al desarrollador** para soporte t√©cnico
            
            **Archivos requeridos:**
            - `data/Poblacion_aseguramiento.xlsx` (Nueva referencia EAPB)
            - `data/vacunacion_fa.csv` (Datos hist√≥ricos)
            - `data/Resumen.xlsx` (Brigadas de emergencia)
            """
            )

    def run(self):
        """
        Ejecuta la aplicaci√≥n completa del sistema unificado
        """
        try:
            logger.info("üöÄ Iniciando aplicaci√≥n del sistema unificado")

            # ============================================================
            # INICIALIZACI√ìN DE LA APLICACI√ìN
            # ============================================================
            self.initialize_app()

            # ============================================================
            # CARGA DE DATOS UNIFICADOS
            # ============================================================
            if not self.app_state["data_loaded"]:
                st.markdown("## üîÑ Inicializando Sistema Unificado")
                st.info(
                    "**El sistema unificado est√° cargando los datos por primera vez...**"
                )

                data_loaded = self.load_unified_data()

                if not data_loaded:
                    st.error("‚ùå **No se pudo inicializar el sistema unificado**")

                    # Mostrar informaci√≥n de ayuda
                    st.markdown("### üÜò Gu√≠a de Soluci√≥n de Problemas")
                    st.info(
                        """
                    **Pasos recomendados:**
                    1. Verifica que los archivos de datos est√©n en la carpeta `data/`
                    2. Revisa que los archivos tengan los nombres correctos
                    3. Reinicia la aplicaci√≥n (Ctrl+R)
                    4. Consulta los logs para m√°s detalles
                    """
                    )

                    # Mostrar errores espec√≠ficos si los hay
                    if self.app_state["loading_errors"]:
                        st.error("**Errores espec√≠ficos encontrados:**")
                        for error in self.app_state["loading_errors"]:
                            st.write(f"‚Ä¢ {error}")

                    return

            # ============================================================
            # INTERFAZ PRINCIPAL
            # ============================================================
            # Crear filtros en sidebar
            filters = self.create_sidebar_filters()

            # Aplicar filtros a datos
            filtered_data = self.apply_filters_to_data(filters)

            # Mostrar contenido principal
            self.show_main_content(filtered_data, filters)

            # Mostrar pie de p√°gina
            self.show_footer()

            logger.info("‚úÖ Aplicaci√≥n ejecutada exitosamente")

        except Exception as e:
            logger.error(f"Error cr√≠tico en la aplicaci√≥n: {str(e)}")
            st.error("‚ùå **Error cr√≠tico en la aplicaci√≥n**")
            st.error(f"**Error:** {str(e)}")

            with st.expander("üîç Informaci√≥n t√©cnica completa"):
                st.code(traceback.format_exc())

            st.markdown(
                """
            ### üö® Error Cr√≠tico del Sistema Unificado
            
            La aplicaci√≥n ha encontrado un error que impide su funcionamiento normal.
            
            **Acciones recomendadas:**
            1. Reinicia la aplicaci√≥n (Ctrl+R o F5)
            2. Verifica que todos los archivos est√©n en su lugar
            3. Revisa los logs del sistema (`dashboard.log`)
            4. Contacta al administrador t√©cnico si el problema persiste
            
            **Sistema:** {system_version}
            **Fecha:** {current_date}
            """.format(
                    system_version=INSTITUTIONAL_CONFIG["version"],
                    current_date=datetime.now().strftime("%d/%m/%Y %H:%M"),
                )
            )


# =====================================================================
# FUNCI√ìN PRINCIPAL DE LA APLICACI√ìN
# =====================================================================
def main():
    """
    Funci√≥n principal de la aplicaci√≥n del sistema unificado
    """
    try:
        logger.info("=" * 60)
        logger.info("üöÄ INICIANDO DASHBOARD UNIFICADO DE VACUNACI√ìN")
        logger.info(f"Versi√≥n: {INSTITUTIONAL_CONFIG['version']}")
        logger.info(f"Fecha: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        logger.info("=" * 60)

        # Crear y ejecutar aplicaci√≥n
        app = UnifiedDashboardApp()
        app.run()

        logger.info("‚úÖ Dashboard ejecutado exitosamente")

    except Exception as e:
        logger.error(f"Error cr√≠tico al inicializar la aplicaci√≥n: {str(e)}")

        st.error("‚ùå **Error cr√≠tico al inicializar la aplicaci√≥n**")
        st.error(f"**Error:** {str(e)}")

        st.markdown(
            f"""
        ### üö® Fallo Cr√≠tico del Sistema
        
        No se pudo inicializar la aplicaci√≥n principal del sistema unificado.
        
        **Informaci√≥n del error:**
        - **Versi√≥n del sistema:** {INSTITUTIONAL_CONFIG['version']}
        - **Componentes cargados:** {'‚úÖ' if SYSTEM_COMPONENTS_LOADED else '‚ùå'}
        - **Fecha del error:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
        
        **Acciones recomendadas:**
        1. Verifica que todos los archivos est√©n en su lugar
        2. Reinicia la aplicaci√≥n (Ctrl+R o F5)
        3. Revisa los logs del sistema (`dashboard.log`)
        4. Contacta al administrador t√©cnico
        
        **Archivos cr√≠ticos requeridos:**
        - `src/data/unified_loader.py`
        - `src/data/population_processor.py`
        - `src/data/vaccination_combiner.py`
        - `src/data/age_calculator.py`
        - `src/data/data_cleaner.py`
        - `src/utils/date_utils.py`
        - `src/utils/helpers.py`
        """
        )

        with st.expander("üîß Informaci√≥n t√©cnica detallada"):
            st.code(traceback.format_exc())


# =====================================================================
# PUNTO DE ENTRADA DE LA APLICACI√ìN
# =====================================================================
if __name__ == "__main__":
    main()
