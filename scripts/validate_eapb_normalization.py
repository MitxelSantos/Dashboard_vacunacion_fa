#!/usr/bin/env python3
"""
Script para validar la normalizaci√≥n de EAPB
Desarrollado para Dashboard de Vacunaci√≥n - Fiebre Amarilla del Tolima
"""

import sys
import os
from pathlib import Path

# Agregar el directorio ra√≠z al path
sys.path.append(str(Path(__file__).parent.parent))

import pandas as pd


def validate_eapb_normalization():
    """
    Valida que la normalizaci√≥n de EAPB est√© funcionando correctamente
    """
    print("üîç Validando Normalizaci√≥n de EAPB")
    print("=" * 50)

    try:
        # 1. Validar que los m√≥dulos se importen correctamente
        print("1Ô∏è‚É£ Validando importaci√≥n de m√≥dulos...")

        try:
            from src.data.eapb_mappings import ALL_EAPB_MAPPINGS, get_eapb_stats

            print("   ‚úÖ M√≥dulo eapb_mappings importado correctamente")
        except ImportError as e:
            print(f"   ‚ùå Error importando eapb_mappings: {e}")
            return False

        try:
            from src.data.eapb_normalizer import (
                normalize_eapb_names,
                validate_eapb_mapping,
            )

            print("   ‚úÖ M√≥dulo eapb_normalizer importado correctamente")
        except ImportError as e:
            print(f"   ‚ùå Error importando eapb_normalizer: {e}")
            return False

        # 2. Validar mapeos
        print("\n2Ô∏è‚É£ Validando mapeos de EAPB...")

        stats = get_eapb_stats()
        print(f"   üìä Total de mapeos: {stats['total_mappings']}")
        print(f"   üìä Nombres can√≥nicos √∫nicos: {stats['unique_canonical_names']}")
        print(
            f"   üìä Registros estimados afectados: {stats['affected_records_estimate']:,}".replace(
                ",", "."
            )
        )

        # Validar consistencia de mapeos
        validate_result = validate_eapb_mapping()
        if validate_result:
            print("   ‚úÖ Mapeos validados correctamente")
        else:
            print("   ‚ö†Ô∏è Advertencias en validaci√≥n de mapeos")

        # 3. Probar carga de datos (si est√°n disponibles)
        print("\n3Ô∏è‚É£ Probando carga de datos...")

        try:
            from src.data.loader import load_datasets

            # Intentar cargar datos
            data = load_datasets()

            if (
                "vacunacion" in data
                and "NombreAseguradora" in data["vacunacion"].columns
            ):
                # Analizar el impacto de la normalizaci√≥n
                vacunacion_df = data["vacunacion"]

                # Verificar si se aplic√≥ la normalizaci√≥n
                if "NombreAseguradora_original" in vacunacion_df.columns:
                    print(
                        "   ‚úÖ Normalizaci√≥n aplicada (se encontr√≥ columna de respaldo)"
                    )

                    # Analizar cambios
                    original_unique = vacunacion_df[
                        "NombreAseguradora_original"
                    ].nunique()
                    normalized_unique = vacunacion_df["NombreAseguradora"].nunique()

                    print(f"   üìä EAPB √∫nicas antes: {original_unique}")
                    print(f"   üìä EAPB √∫nicas despu√©s: {normalized_unique}")
                    print(
                        f"   üìä Reducci√≥n: {original_unique - normalized_unique} ({((original_unique - normalized_unique) / original_unique * 100):.1f}%)"
                    )

                    # Mostrar algunos ejemplos de normalizaci√≥n
                    changes = vacunacion_df[
                        vacunacion_df["NombreAseguradora"]
                        != vacunacion_df["NombreAseguradora_original"]
                    ]

                    if len(changes) > 0:
                        print(
                            f"   üìä Total de registros normalizados: {len(changes):,}".replace(
                                ",", "."
                            )
                        )

                        # Mostrar ejemplos
                        print("\n   üìã Ejemplos de normalizaci√≥n aplicada:")
                        examples = (
                            changes.groupby(
                                ["NombreAseguradora_original", "NombreAseguradora"]
                            )
                            .size()
                            .reset_index()
                        )
                        examples.columns = ["Original", "Normalizado", "Registros"]
                        examples = examples.sort_values(
                            "Registros", ascending=False
                        ).head(5)

                        for _, row in examples.iterrows():
                            print(
                                f"      '{row['Original']}' ‚Üí '{row['Normalizado']}' ({row['Registros']:,} registros)".replace(
                                    ",", "."
                                )
                            )

                else:
                    print("   ‚ö†Ô∏è No se encontr√≥ evidencia de normalizaci√≥n aplicada")
                    print(
                        "   üí° Verificar que la normalizaci√≥n est√© habilitada en loader.py"
                    )

            else:
                print("   ‚ö†Ô∏è No se pudieron cargar datos de vacunaci√≥n para validaci√≥n")

        except Exception as e:
            print(f"   ‚ö†Ô∏è Error cargando datos para validaci√≥n: {str(e)}")

        # 4. Validar algunas normalizaciones espec√≠ficas
        print("\n4Ô∏è‚É£ Probando normalizaci√≥n en datos de ejemplo...")

        # Crear datos de prueba
        test_data = pd.DataFrame(
            {
                "NombreAseguradora": [
                    "LA NUEVA EPS S.A.",
                    "LA NUEVA EPS S.A.-CM",
                    "SALUD TOTAL S.A. E.P.S.",
                    "SALUD TOTAL S.A. E.P.S. CM",
                    "MEDIMAS EPS S.A.S",
                    "MEDIM√ÅS EPS S.A.S. -CM",
                    "Sin dato",
                    "OTRA EPS NO MAPEADA",
                ]
            }
        )

        # Aplicar normalizaci√≥n
        test_normalized = normalize_eapb_names(
            test_data, "NombreAseguradora", ALL_EAPB_MAPPINGS
        )

        # Verificar resultados
        expected_results = {
            "LA NUEVA EPS S.A.": "LA NUEVA EPS S.A.",
            "LA NUEVA EPS S.A.-CM": "LA NUEVA EPS S.A.",
            "SALUD TOTAL S.A. E.P.S.": "SALUD TOTAL S.A. E.P.S.",
            "SALUD TOTAL S.A. E.P.S. CM": "SALUD TOTAL S.A. E.P.S.",
            "MEDIMAS EPS S.A.S": "MEDIMAS EPS S.A.S",
            "MEDIM√ÅS EPS S.A.S. -CM": "MEDIMAS EPS S.A.S",
            "Sin dato": "Sin dato",
            "OTRA EPS NO MAPEADA": "OTRA EPS NO MAPEADA",
        }

        all_correct = True
        for i, row in test_data.iterrows():
            original = row["NombreAseguradora"]
            normalized = test_normalized.iloc[i]["NombreAseguradora"]
            expected = expected_results[original]

            if normalized == expected:
                print(f"   ‚úÖ '{original}' ‚Üí '{normalized}'")
            else:
                print(f"   ‚ùå '{original}' ‚Üí '{normalized}' (esperado: '{expected}')")
                all_correct = False

        if all_correct:
            print("   ‚úÖ Todas las normalizaciones de prueba funcionaron correctamente")
        else:
            print("   ‚ùå Algunas normalizaciones de prueba fallaron")
            return False

        # 5. Resumen final
        print("\n" + "=" * 50)
        print("üéâ VALIDACI√ìN COMPLETADA")
        print("‚úÖ La normalizaci√≥n de EAPB est√° funcionando correctamente")
        print("\nüí° Pr√≥ximos pasos:")
        print(
            "   1. Ejecutar el dashboard y verificar que los datos se muestren correctamente"
        )
        print(
            "   2. Revisar las vistas de aseguramiento para confirmar la consolidaci√≥n"
        )
        print("   3. Verificar que los filtros funcionen con los nombres normalizados")

        return True

    except Exception as e:
        print(f"\n‚ùå Error durante la validaci√≥n: {str(e)}")
        import traceback

        traceback.print_exc()
        return False


def analyze_eapb_impact():
    """
    Analiza el impacto de la normalizaci√≥n en los datos reales
    """
    print("\nüîç Analizando impacto de la normalizaci√≥n...")

    try:
        from src.data.loader import load_datasets

        data = load_datasets()

        if (
            "vacunacion" not in data
            or "NombreAseguradora" not in data["vacunacion"].columns
        ):
            print("‚ùå No se pudieron cargar los datos para an√°lisis")
            return

        df = data["vacunacion"]

        if "NombreAseguradora_original" not in df.columns:
            print(
                "‚ö†Ô∏è No se encontr√≥ columna de respaldo - no se puede analizar el impacto"
            )
            return

        # An√°lisis detallado
        print("\nüìä AN√ÅLISIS DE IMPACTO:")

        # 1. EAPB m√°s afectadas por la normalizaci√≥n
        changes = df[df["NombreAseguradora"] != df["NombreAseguradora_original"]]

        if len(changes) > 0:
            print(
                f"\n1Ô∏è‚É£ Total de registros normalizados: {len(changes):,}".replace(
                    ",", "."
                )
            )
            print(f"   Porcentaje del total: {len(changes)/len(df)*100:.1f}%")

            # Agrupaciones m√°s importantes
            major_changes = (
                changes.groupby(["NombreAseguradora_original", "NombreAseguradora"])
                .size()
                .reset_index()
            )
            major_changes.columns = ["Original", "Normalizado", "Registros"]
            major_changes = major_changes.sort_values("Registros", ascending=False)

            print("\n2Ô∏è‚É£ Top 10 normalizaciones por impacto:")
            for i, row in major_changes.head(10).iterrows():
                print(
                    f"   {row['Registros']:6,} registros: '{row['Original']}' ‚Üí '{row['Normalizado']}'".replace(
                        ",", "."
                    )
                )

            # An√°lisis por grupo de normalizaci√≥n
            print("\n3Ô∏è‚É£ Consolidaciones m√°s significativas:")
            consolidated = (
                df.groupby("NombreAseguradora")
                .agg(
                    {
                        "NombreAseguradora_original": "nunique",
                        "IdPaciente": "count",  # Usar IdPaciente en lugar de NombreAseguradora
                    }
                )
                .reset_index()
            )
            consolidated.columns = [
                "EAPB_Normalizada",
                "Variantes_Originales",
                "Total_Registros",
            ]
            consolidated["Beneficio"] = consolidated["Variantes_Originales"] - 1

            # Mostrar solo las que tuvieron consolidaci√≥n
            significant = consolidated[consolidated["Beneficio"] > 0].sort_values(
                "Beneficio", ascending=False
            )

            for _, row in significant.head(10).iterrows():
                print(
                    f"   '{row['EAPB_Normalizada']}': {row['Variantes_Originales']} variantes ‚Üí 1 nombre ({row['Total_Registros']:,} registros)".replace(
                        ",", "."
                    )
                )

        else:
            print("‚ÑπÔ∏è No se detectaron cambios por normalizaci√≥n")

        # 4. Estad√≠sticas finales
        original_unique = df["NombreAseguradora_original"].nunique()
        final_unique = df["NombreAseguradora"].nunique()

        print(f"\n4Ô∏è‚É£ Resumen final:")
        print(f"   EAPB √∫nicas antes: {original_unique}")
        print(f"   EAPB √∫nicas despu√©s: {final_unique}")
        print(f"   Reducci√≥n absoluta: {original_unique - final_unique}")
        print(
            f"   Reducci√≥n porcentual: {(original_unique - final_unique)/original_unique*100:.1f}%"
        )

    except Exception as e:
        print(f"‚ùå Error en an√°lisis de impacto: {str(e)}")


def main():
    """
    Funci√≥n principal del script de validaci√≥n
    """
    print("üöÄ Script de Validaci√≥n - Normalizaci√≥n EAPB")
    print("Dashboard de Vacunaci√≥n - Fiebre Amarilla del Tolima")
    print("=" * 60)

    # Validaci√≥n principal
    validation_success = validate_eapb_normalization()

    if validation_success:
        # An√°lisis de impacto si la validaci√≥n fue exitosa
        analyze_eapb_impact()
    else:
        print("\n‚ùå La validaci√≥n fall√≥. Revisa los errores anteriores.")
        return 1

    return 0


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
