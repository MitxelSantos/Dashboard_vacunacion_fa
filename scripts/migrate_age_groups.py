#!/usr/bin/env python3
"""
Script para migrar grupos de edad existentes a los nuevos rangos
Dashboard de Vacunaci√≥n - Fiebre Amarilla del Tolima
"""

import sys
import os
from pathlib import Path

# Agregar el directorio ra√≠z al path
sys.path.append(str(Path(__file__).parent.parent))

import pandas as pd


def migrate_age_groups():
    """
    Migra los grupos de edad existentes a los nuevos rangos
    """
    print("üîÑ Migrando Grupos de Edad a Nuevos Rangos")
    print("=" * 50)

    try:
        # Cargar datos
        print("1Ô∏è‚É£ Cargando datos...")
        from src.data.loader import load_datasets

        data = load_datasets()

        if "vacunacion" not in data:
            print("‚ùå No se encontraron datos de vacunaci√≥n")
            return False

        df = data["vacunacion"]

        # Verificar columnas de edad
        if "Edad_Vacunacion" not in df.columns:
            print("‚ùå No se encontr√≥ columna 'Edad_Vacunacion'")
            return False

        print(f"   üìä Total de registros: {len(df):,}".replace(",", "."))

        # Analizar grupos de edad actuales
        print("\n2Ô∏è‚É£ Analizando grupos de edad actuales...")

        if "Grupo_Edad" in df.columns:
            current_groups = df["Grupo_Edad"].value_counts()
            print("   Grupos de edad actuales:")
            for group, count in current_groups.items():
                print(f"     {group}: {count:,} registros".replace(",", "."))

        # Aplicar nueva categorizaci√≥n
        print("\n3Ô∏è‚É£ Aplicando nueva categorizaci√≥n...")

        def categorize_age_new(age):
            """Nueva funci√≥n de categorizaci√≥n"""
            try:
                age_num = float(age)
                if pd.isna(age_num):
                    return "Sin dato"
                elif age_num < 1:
                    return "Menor de 1 a√±o"
                elif age_num < 5:
                    return "1 a 4 a√±os"
                elif age_num < 10:
                    return "5 a 9 a√±os"
                elif age_num < 20:
                    return "10 a 19 a√±os"
                elif age_num < 30:
                    return "20 a 29 a√±os"
                elif age_num < 40:
                    return "30 a 39 a√±os"
                elif age_num < 50:
                    return "40 a 49 a√±os"
                elif age_num < 60:
                    return "50 a 59 a√±os"
                elif age_num < 70:
                    return "60 a 69 a√±os"
                else:  # 70 a√±os o m√°s
                    return "70 a√±os o m√°s"
            except (ValueError, TypeError):
                return "Sin dato"

        # Crear nueva columna
        df["Grupo_Edad_Nuevo"] = df["Edad_Vacunacion"].apply(categorize_age_new)

        # Analizar nuevos grupos
        new_groups = df["Grupo_Edad_Nuevo"].value_counts()
        print("   Nuevos grupos de edad:")
        for group, count in new_groups.items():
            print(f"     {group}: {count:,} registros".replace(",", "."))

        # Comparar distribuciones
        print("\n4Ô∏è‚É£ Comparando distribuciones...")

        if "Grupo_Edad" in df.columns:
            # Crear tabla de migraci√≥n
            migration_table = pd.crosstab(
                df["Grupo_Edad"], df["Grupo_Edad_Nuevo"], margins=True
            )

            print("   Tabla de migraci√≥n (Anterior ‚Üí Nuevo):")
            print(migration_table)

        # Estad√≠sticas finales
        print(f"\n5Ô∏è‚É£ Estad√≠sticas finales...")

        if "Grupo_Edad" in df.columns:
            old_unique = df["Grupo_Edad"].nunique()
            new_unique = df["Grupo_Edad_Nuevo"].nunique()
            print(f"   Grupos √∫nicos antes: {old_unique}")
            print(f"   Grupos √∫nicos despu√©s: {new_unique}")

        # Verificar que no se perdieron registros
        total_original = len(df)
        total_new = df["Grupo_Edad_Nuevo"].notna().sum()
        missing = total_original - total_new

        if missing == 0:
            print("   ‚úÖ No se perdieron registros en la migraci√≥n")
        else:
            print(f"   ‚ö†Ô∏è Se perdieron {missing} registros en la migraci√≥n")

        print("\n" + "=" * 50)
        print("üéâ MIGRACI√ìN COMPLETADA")
        print("‚úÖ Los nuevos rangos de edad est√°n listos para usar")
        print("\nüí° Pr√≥ximos pasos:")
        print("   1. Reiniciar el dashboard")
        print("   2. Verificar que los filtros muestren los nuevos rangos")
        print("   3. Revisar los gr√°ficos de distribuci√≥n por edad")

        return True

    except Exception as e:
        print(f"\n‚ùå Error durante la migraci√≥n: {str(e)}")
        import traceback

        traceback.print_exc()
        return False


def validate_new_age_groups():
    """
    Valida que los nuevos grupos de edad est√©n funcionando correctamente
    """
    print("\nüîç Validando nuevos grupos de edad...")

    try:
        from src.data.loader import load_datasets

        data = load_datasets()
        df = data["vacunacion"]

        if "Grupo_Edad" not in df.columns:
            print("‚ùå No se encontr√≥ columna Grupo_Edad")
            return False

        # Verificar que se usen los nuevos rangos
        expected_ranges = [
            "Menor de 1 a√±o",
            "1 a 4 a√±os",
            "5 a 9 a√±os",
            "10 a 19 a√±os",
            "20 a 29 a√±os",
            "30 a 39 a√±os",
            "40 a 49 a√±os",
            "50 a 59 a√±os",
            "60 a 69 a√±os",
            "70 a√±os o m√°s",
        ]

        actual_ranges = df["Grupo_Edad"].unique()

        print("‚úÖ Rangos encontrados en los datos:")
        for range_name in actual_ranges:
            if range_name in expected_ranges:
                count = (df["Grupo_Edad"] == range_name).sum()
                print(f"   ‚úÖ {range_name}: {count:,} registros".replace(",", "."))
            elif str(range_name) != "Sin dato":
                count = (df["Grupo_Edad"] == range_name).sum()
                print(
                    f"   ‚ö†Ô∏è {range_name}: {count:,} registros (inesperado)".replace(
                        ",", "."
                    )
                )

        # Contar "Sin dato"
        sin_dato = (df["Grupo_Edad"] == "Sin dato").sum()
        if sin_dato > 0:
            print(f"   ‚ÑπÔ∏è Sin dato: {sin_dato:,} registros".replace(",", "."))

        return True

    except Exception as e:
        print(f"‚ùå Error en validaci√≥n: {str(e)}")
        return False


def main():
    """
    Funci√≥n principal del script de migraci√≥n
    """
    print("üöÄ Script de Migraci√≥n - Nuevos Rangos de Edad")
    print("Dashboard de Vacunaci√≥n - Fiebre Amarilla del Tolima")
    print("=" * 60)

    # Migraci√≥n
    migration_success = migrate_age_groups()

    if migration_success:
        # Validaci√≥n
        validate_new_age_groups()
    else:
        print("\n‚ùå La migraci√≥n fall√≥. Revisa los errores anteriores.")
        return 1

    return 0


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
